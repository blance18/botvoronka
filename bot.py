import asyncio
from aiogram.types import ParseMode
import os
import json
import sqlite3
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.markdown import bold
from aiogram.dispatcher.filters import CommandStart
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ParseMode
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

with open("config.json", "r", encoding="utf-8") as f:
    config = json.load(f)

TOKEN =""  # –í—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω —Å—é–¥–∞ –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

dp.middleware.setup(LoggingMiddleware())

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ (FSM) —Ä–∞—Å—Å—ã–ª–∫–∏
class Broadcast(StatesGroup):
    waiting_for_text = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    waiting_for_media = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –º–µ–¥–∏–∞

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.callback_query_handler(lambda c: c.data == "skip_course")
async def skip_course(callback_query: types.CallbackQuery):
    keyboard_bonus = InlineKeyboardMarkup(row_width=1)
    keyboard_bonus.add(
        InlineKeyboardButton("üé∞ –ó–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å", url=config["ref_link"]),
        InlineKeyboardButton("üé° –ö—Ä—É—Ç–∏—Ç—å –±–æ–Ω—É—Å–Ω–æ–µ –∫–æ–ª–µ—Å–æ", web_app=types.WebAppInfo(url=config["wheel_link"]))
    )

    await bot.send_message(
        callback_query.from_user.id,
        "*üéÅ –õ–æ–≤–∏ –±–æ–Ω—É—Å +500% –∫ –¥–µ–ø–æ–∑–∏—Ç—É!*\n*üîë –ü—Ä–æ–º–æ–∫–æ–¥:* `BLANCE`",
        reply_markup=keyboard_bonus,
        parse_mode=ParseMode.MARKDOWN
    )

    await asyncio.sleep(300)

    keyboard_channel = InlineKeyboardMarkup(row_width=1)
    keyboard_channel.add(
        InlineKeyboardButton("üì° –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª (–∫—ç—Ñ 24)", url=config["channel_link"])
    )

    await bot.send_message(
        callback_query.from_user.id,
        "*üß† –í –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ —Å–µ–≥–æ–¥–Ω—è –∂–∏—Ä–Ω—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å —Å –∫—ç—Ñ–æ–º 24!*\n–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏ —Å–≤–æ–π —à–∞–Ω—Å üöÄ",
        reply_markup=keyboard_channel,
        parse_mode=ParseMode.MARKDOWN
    )



@dp.callback_query_handler(lambda c: c.data == "skip_course")
async def skip_course(callback_query: types.CallbackQuery):
    keyboard_bonus = InlineKeyboardMarkup(row_width=1)
    keyboard_bonus.add(
        InlineKeyboardButton("üé∞ –ó–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å", url=config["ref_link"]),
        InlineKeyboardButton("üé° –ö—Ä—É—Ç–∏—Ç—å –±–æ–Ω—É—Å–Ω–æ–µ –∫–æ–ª–µ—Å–æ", web_app=types.WebAppInfo(url=config["wheel_link"]))
    )

    await bot.send_message(
        callback_query.from_user.id,
        """*üéÅ –õ–æ–≤–∏ –±–æ–Ω—É—Å +500% –∫ –¥–µ–ø–æ–∑–∏—Ç—É!*
*üîë –ü—Ä–æ–º–æ–∫–æ–¥:* `BLANCE`","""
        reply_markup=keyboard_bonus,
        parse_mode=ParseMode.MARKDOWN
    )

    # –ñ–¥—ë–º 5 –º–∏–Ω—É—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    await asyncio.sleep(300)

    keyboard_channel = InlineKeyboardMarkup(row_width=1)
    keyboard_channel.add(
        InlineKeyboardButton("üì° –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª (–∫—ç—Ñ 24)", url=config["channel_link"])
    )

    await bot.send_message(
        callback_query.from_user.id,
        """*üß† –í –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ —Å–µ–≥–æ–¥–Ω—è –∂–∏—Ä–Ω—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å —Å –∫—ç—Ñ–æ–º 24!*
–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏ —Å–≤–æ–π —à–∞–Ω—Å üöÄ""",
        reply_markup=keyboard_channel,
        parse_mode=ParseMode.MARKDOWN
    )

# –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=["admin"])
async def admin_panel(message: types.Message):
    if message.from_user.id == config["admin_id"]:
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats"),
            InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="send_broadcast")
        )
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
            reply_markup=keyboard
        )

@dp.callback_query_handler(lambda c: c.data == "show_stats")
async def show_stats(callback_query: types.CallbackQuery):
    if callback_query.from_user.id == config["admin_id"]:
        con = sqlite3.connect("database/user.db")
        cur = con.cursor()
        cur.execute("SELECT COUNT(*) FROM users")
        total_users = cur.fetchone()[0]
        cur.execute("SELECT COUNT(*) FROM users WHERE ref_link IS NOT NULL")
        registered_users = cur.fetchone()[0]
        con.close()
        await bot.send_message(
            callback_query.from_user.id,
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: {registered_users}"
        )

@dp.callback_query_handler(lambda c: c.data == "send_broadcast")
async def send_broadcast(callback_query: types.CallbackQuery):
    if callback_query.from_user.id == config["admin_id"]:
        await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        await Broadcast.waiting_for_text.set()

@dp.message_handler(state=Broadcast.waiting_for_text, content_types=types.ContentTypes.TEXT)
async def broadcast_text(msg: types.Message, state: FSMContext):
    await state.update_data(text=msg.text)
    await msg.answer("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç), –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    await Broadcast.waiting_for_media.set()

@dp.message_handler(lambda msg: msg.text == "/skip", state=Broadcast.waiting_for_media)
async def skip_media(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    con = sqlite3.connect("database/user.db")
    cur = con.cursor()
    cur.execute("SELECT user_id FROM users")
    users = cur.fetchall()
    for user in users:
        try:
            await bot.send_message(user[0], data["text"])
        except:
            continue
    await msg.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    await state.finish()

@dp.message_handler(content_types=[types.ContentType.PHOTO, types.ContentType.VIDEO, types.ContentType.DOCUMENT], state=Broadcast.waiting_for_media)
async def handle_media(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    con = sqlite3.connect("database/user.db")
    cur = con.cursor()
    cur.execute("SELECT user_id FROM users")
    users = cur.fetchall()
    for user in users:
        try:
            if msg.content_type == types.ContentType.PHOTO:
                await bot.send_photo(user[0], msg.photo[-1].file_id, caption=data["text"])
            elif msg.content_type == types.ContentType.VIDEO:
                await bot.send_video(user[0], msg.video.file_id, caption=data["text"])
            elif msg.content_type == types.ContentType.DOCUMENT:
                await bot.send_document(user[0], msg.document.file_id, caption=data["text"])
        except:
            continue
    await msg.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Å –º–µ–¥–∏–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    await state.finish()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
